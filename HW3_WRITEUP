HW3_WRITEUP

Aaron Elmore and Harry Presman 

We are free for any remaining office hours.

All HW required output is accessed by the debug flag 3
ie:  
    filesys/nachos -f -cp filesys/test/big 1 -d 3
or:
    vm/nachos -x test/multi_sort -d 3 -rs 10101

Part I
======================================
Modified code for part 1:
        Everything in the VM directory.
        Most of the Makefiles ( to get the VM and Filesys to compile orthogonally )
        machine/translate.*
        userprog/addrspace.*
        threads/system.*

    1. The SWAP is created as a 512 page file.  Pages are allocated and initialized on address space creation and loaded on demand.  The address space page table begins empty, so virtual pages are mapped to their allocated swap page, with use set to false.  Because of the decision to have each address space's table map virtual pages to swap pages, a new translate function (called on the global vmMgr object and passed through to the swapMgr) to translate swap pages numbers to physical page numbers was needed.

    2. The page fault handler is called when a page's use bit is set to false.  The handler simply calls the vmMgr getReplacement function to swap the new page in, and if necessary, write and/or swap the old page out.  If the page's dirty bit is set, we write to SWAP and reset that bit to false.  
    We have implemented three replacement policies, each using a common policy interface.  We implemented LRU, FIFO and RandomReplacement policies, and the policy is chosen by creating that policy object and assigning it to an IReplacementPolicy reference in the VMManager initializer.

    3. Timing measurements are reported below.  Each policy was run and timed using the shell 'time' function using various numbers of physical pages.  RandomReplacement and FIFO were fastest with larger page sizes, probably due to the LRU policy having to shuffle pages every time the page is read.  With smaller page sizes, the LRU policy performs the best, probably because the savings from swapping less are more than the cost of marking and shuffling a small nummber of pages.  Data access latency can be roughly inferred from these measurements, but true cost cannot be measured with our timing method.

Random replacement
4.214s -- small_sort - pages 32 faults 31
4.322s -- small_sort - pages 16 faults 1155
4.759s -- small_sort - pages 8 faults 8831
5.747s -- small_sort - pages 4 faults 473480
7.900s -- small_sort - pages 2 faults 1971780

FIFO
4.211s -- small_sort - pages 32 faults 31
4.433s -- small_sort - pages 16 faults 2663
4.586s -- small_sort - pages 8 faults 7564
5.986s -- small_sort - pages 4 faults 658123
7.547s -- small_sort - pages 2 faults 1782685

LRU
5.602s -- small_sort - pages 32 faults 31
5.658s -- small_sort - pages 16 faults 2044
5.317s -- small_sort - pages 8 faults 4220
5.838s -- small_sort - pages 4 faults 501634
7.480s -- small_sort - pages 2 faults 1385567

Testing:
We tested the VM code with each of the test programs, and everything ran smoothly (after fixing almost all the programs).  We also implemented a few extra tests and these can be found in the submitted test directory.  The fixed 'sort' uses more space than physical memory, 'multi_sort' with random interrupts enabled tests large memory spaces + process switching.

Copy-on-Write
-----------------
when a (new) page is added the swap manager does a hash on the new page, and
compares against hash of all existing patches. If a match is found
then a bit compare is done to ensure no false positive matches. The new page
is added as a virtual pointer to the copy. The page will need a counter
added to it to show the number of pages using this page. A counter of one means this
pages is not shared. If either the original or the copy dirties the page, 
then before the dirty (write),a copy needs to occur, the counters reset. 
and the virtual pointer (or page) needs to point to its own copy of the page.


Part II
======================================

Max File Size using Indirect Pointer: Works well. With  Sector Size:128 we use 4 Max Direct sectors, 26 max IndirectPointerBlocks (IPB). 31 Sectors per Indirect Block Max File Size:103680  FileHdr stores numSectors, numBytes, directSectors, and an array of ints for sectors holding IPBs. On fetch from IPBs are loaded. Only allocate sectors as needed. Extend in header loads freemap, extends and persists freemap. 

Extensible Files: Works based on fileHdr.numBytes and writeAt Position and Numbytes. Can handle writing in file with overflow, and appends. Leverages fileHdr extend. If not aligned, reads in sector before writing (some of this logic is used from sample).

Extensible Directory: Tables are made extensible by growing by 1.5 size when no free directoryEntries are found.  The directory object is extended and the tableSize is persisted at the top of the file.  This size is read in to determine how much of the file should be read in, with a read for the rest of the directory object. Each sector for the directory is located by the dirctoryHeader byte to sector  and allows for extensible files with gaps.

Issues to consider:
(Good) Be sure your file header is not larger than one disk sector.
(Good) Be sure to support direct file access with "holes" in the file. 
(Good) The exception is that if the file is created to be a given size, your implementation should allocate as many sectors as required to hold that amount of data.
(Good) Be sure to implement extensible files - if the program writes beyond the end of the file, be sure to automatically extend the file to hold the written data.
(Good) Be sure to gracefully handle the case when the program attempts to write more data to the disk when disk is full or the maximum size limit is reached.
(Good) Be sure to reclaim the disk blocks when a file is removed (e.g. use nachos -r ).
(Good) Be sure that each disk block is allocated to at most one file. 

CANNOT run with swap space, we designed a unix style system where swap sits outside of the filesystem (separate stub partition).

Primary files modified include FileSystem (create), FileHeader (most), IndirectPointerBlock (new), OpenFile (write at), Directory (Fetch,Save, and Add)

Testing: 
------------
-filesys/nachos -cp test/small_sort ss -x ss -d 2
Gives same result as executing small_sort

-Set default Dir size to test extensible directory and file size. 5th file grows:D [0][1]: [4] -> [6], 7th file grows dirTable size and file size (needs 2nd sector)
D [0][1]: [6] -> [9]
F [0][1]: [80] -> [184] this is a sample of the file object gr

-Created a 'XL' file that goes to 2k.
filesys/nachos -cp filesys/test/xal x -d 3 -p x

-Tested various create and delete scenarios.


